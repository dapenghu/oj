 public class Solution {
    public void nextPermutation(int[] num) {
        next(num);
        prev(num);
        next(num);
    }
    
    void next(int[] num){
        int N = num.length;
        if (N < 2) return;
        int pivot = N - 1;
        while (pivot > 0 && num[pivot - 1] >= num[pivot]) pivot--;
        if (pivot > 0){
            int next = N - 1;
            while (num[pivot - 1] >= num[next]) next--;
            int tmp = num[pivot - 1];
            num[pivot - 1] = num[next];
            num[next] = tmp;
        }
        int right = N - 1;
        int left = pivot;
        while (left < right ){
            int tmp = num[left];
            num[left++] = num[right];
            num[right--] = tmp;
        }
    }
    
    void next1(int[] num){
        int N = num.length;
        if (N < 2) return;
        
        int i = N - 1;
        for (; i > 0 && num[i - 1] >= num[i]; i--);
        
        if (i > 0){
          int j = i + 1;
          for (; j < N && num[j] > num[i - 1]; j++);
          swap(num, i - 1, j - 1);
        }
        int j = N - 1;
        while (i < j){
          swap(num, i++, j--);
        }
    }
    
    void prev(int[] num){
        int N = num.length;
        if (N < 2) return;
        
        int i = N - 1;
        for (; i > 0 && num[i - 1] <= num[i]; i--);
        if (i > 0){
            int j = i + 1;
            for (; j < N && num[j] < num[i - 1]; j++);
            swap(num, i - 1, j - 1);
        }
        int j = N - 1;
        while (i < j) swap(num, i++, j--);
    }
    
    void swap(int[] A, int a, int b){
        int tmp = A[a];
        A[a] = A[b];
        A[b] = tmp;
    }
}

