 public class Solution {
    public int[] searchRange(int[] A, int target) {
        int[] ans = new int[2];
        ans[0] = ans[1] = -1;
        int start = 0, end = A.length - 1;
        while (start <= end){
            int mid = (start + end) >> 1;
            // main diff 
            if (A[mid] < target){
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        if (start == A.length || A[start] != target) return ans;
        ans[0] = start;
        end = A.length - 1;
        while (start <= end){
            int mid = (start + end) >> 1;
            // main diff 
            if (A[mid] <= target){
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        ans[1] = end;
        return ans;
    }
    
    public int[] searchRange1(int[] A, int target) {
        int[] ans = new int[2];
        ans[0] = ans[1] = -1;
        int N = A.length;
        if (N == 0) return ans;
        // find left
        int a = 0, b = N-1;
        while (a <= b){
            int m = (a+b)>>1;
            if (A[m] < target){
                a = m+1;
            }else if (A[m] > target){
                b = m-1;
            }else {
                if (m==0 || A[m-1] < target){
                    ans[0] = m;
                    break;
                }else {
                    b = m-1;
                }
            }
        }
        if (ans[0] < 0) return ans;
        // find right
        a = ans[0];
        b = N - 1;
        while (a <= b){
            int m = (a+b)>>1;
            if (A[m] > target){
                b = m-1;
            }else if (A[m] < target){
                a = m+1;
            }else {
                if (m == N-1 || A[m+1] > target){
                    ans[1] = m;
                    break;
                }else {
                    a = m+1;
                }
            }
        }
        return ans;
    }
}