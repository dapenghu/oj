public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int N = numbers.length;
        if (N < 2){
            return null;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        for (int i = 0; i < N; i++){
            if (map.get(target - numbers[i]) != null){
                ans[0] = map.get(target - numbers[i]);
                ans[1] = i+1;
                break;
            } else {
                map.put(numbers[i], i+1);
            }
        }
        return ans;
    }
    public int[] twoSum1(int[] numbers, int target) {
        int[] ans = new int[2];
        Map<Integer, Integer> pos = new HashMap<>(numbers.length);
        for (int i = 0; i < numbers.length; i++){
            int diff = target - numbers[i];
            if (pos.containsKey(diff)){
                ans[0] = pos.get(diff);
                ans[1] = i + 1;
                return ans;
            }else{
                pos.put(numbers[i], i+1);
            }
        }
        return ans;
    }
}