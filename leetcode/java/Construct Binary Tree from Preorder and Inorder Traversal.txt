 /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder.length != inorder.length) return null;
        return buildTree(preorder, 0, preorder.length, 
                         inorder,  0, inorder.length);
    }
    // return root of this sub tree
    public TreeNode buildTree(int[] preorder, int pa, int pb, int[] inorder, int ia, int ib) {
        if (pa == pb) return null;
        
        TreeNode root = new TreeNode(preorder[pa]);
        // find root in inorder;
        int pivot = ia;
        for(int i = ia; i < ib; i++){
            if (inorder[i] == preorder[pa]){
                pivot = i;
                break;
            }
        }
        int left = pivot - ia;
        int right = ib - pivot;
        root.left = buildTree(preorder, pa+1, pa+1+left, inorder, ia, pivot);
        root.right = buildTree(preorder, pa+1+left, pb, inorder, pivot+1, ib);
        return root;
    }
}
