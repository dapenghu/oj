public class Solution {
    public List<List<String>> partition(String s) {
        int N = s.length();
        if (N == 0) {
            return Collections.emptyList();
        }
        boolean[][] pal = new boolean[N][N];
        List<List<List<String>>>partitions = new ArrayList<>(N);
        for (int i = 0; i < N; i++) {
            partitions.add(new ArrayList<List<String>>());
        }
        for (int i = N - 1; i >= 0; i--){
            List<List<String>> partFromI = partitions.get(i);
            for (int j = i; j < N; j++){
                if (s.charAt(i) == s.charAt(j) && (j - i < 2 || pal[i + 1][j - 1])){
                    pal[i][j] = true;
                    if (j == N - 1){
                      List<String> part = new ArrayList<>();
                      part.add(s.substring(i, N));
                      partFromI.add(part);
                    } else {
                        for (List<String> partFromJPlus : partitions.get(j+1)){
                            List<String> part = new ArrayList<>();
                            part.add(s.substring(i, j+1));
                            part.addAll(partFromJPlus);
                            partFromI.add(part);
                        }
                    }
                }
            }
        }
        return partitions.get(0);
    }
}