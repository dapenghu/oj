 public class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0){
            return "";
        }
        int len = 1;
        int start = 0;
        int N = s.length();
        boolean[][] dp = new boolean[N][N];
        for (int i = N - 1; i >= 0; i--){
            for (int j = i; j < N; j++){
                if (s.charAt(i) == s.charAt(j)) {
                    if (j - i < 2 || dp[i + 1][j - 1]) {
                        dp[i][j] = true;
                        if (len < j - i + 1){
                            len = j - i + 1;
                            start = i;
                        }
                    }
                }
            }
        }
        return s.substring(start, start + len);
    }
    
    public String longestPalindrome1(String s) {
        if (s == null || s.length() < 2) return s;
        int N = s.length();
        boolean[][] p = new boolean[N][N];
        int start = N - 1;
        int len = 1;
        for (int i = N - 1; i >= 0; i--){
            for (int j = i; j < N; j++){
                if ((s.charAt(i) == s.charAt(j)) && (j - i < 2 || p[i + 1][j - 1])){
                    p[i][j] = true;
                    if (j - i + 1 > len){
                        len = j - i + 1;
                        start = i;
                    }
                }
            }
        }
        return s.substring(start, start + len);
    }
}