 public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        if (digits.length() == 0) {
            ans.add("");
            return ans;
        }
        dfs(digits.toCharArray(), 0, new StringBuilder(), ans);
        return ans;
    }
    
    void dfs(char[] digits, int i, StringBuilder sb, List<String> ans){
        if (i == digits.length){
            ans.add(sb.toString());
            return;
        }
        char[] chs = map(digits[i]);
        for (int k = 0; k < chs.length; k++){
            sb.append(chs[k]);
            dfs(digits, i + 1, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
    
    char[] map(char digit){
        if (digit == '2') {
            return new char[]{'a', 'b', 'c'};
        } else if (digit == '3'){
            return new char[]{'d', 'e', 'f'};
        } else if (digit == '4'){
            return new char[]{'g', 'h', 'i'};
        } else if (digit == '5'){
            return new char[]{'j', 'k', 'l'};
        } else if (digit == '6'){
            return new char[]{'m', 'n', 'o'};
        } else if (digit == '7'){
            return new char[]{'p', 'q', 'r', 's'};
        } else if (digit == '8'){
            return new char[]{'t', 'u', 'v'};
        } else {
            return new char[]{'w', 'x', 'y', 'z'};
        }
    }
}