 public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> ans = new ArrayList<>();
        if (num.length == 0) return ans;
        dfs(num, 0, ans);
        return ans;
    }
    void dfs(int[] num, int i, List<List<Integer>> ans ){
        if (i == num.length - 1){
            List<Integer> perm = new ArrayList<>();
            for (int k = 0; k < num.length; k++){
                perm.add(num[k]);
            }
            ans.add(perm);
            return;
        }
        for (int j = i; j < num.length; j++){
            swap(num, i, j);
            dfs(num, i+1, ans);
            swap(num, i, j);
        }
    }
    
    void dfs1(int[] num, int i, List<List<Integer>> ans ){
        if ( i == num.length - 1){
            List<Integer> perm = new ArrayList<>();
            for (int k = 0; k < num.length; k++) perm.add(num[k]);
            ans.add(perm);
            return;
        }
        for (int j = i; j < num.length; j++){
            swap(num, i, j);
            dfs(num, i + 1, ans);
            swap(num, i, j);
        }
    }
    
    void swap(int[] num, int a, int b){
        int temp = num[a];
        num[a] = num[b];
        num[b] = temp;
    }
}
